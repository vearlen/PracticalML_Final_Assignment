confusionMatrix(factor(valid.model$classe),pred.lda)$overall[1]
#cleaning data
library(caret)
#train models
lda <- train(classe ~., data=train.model,method ="lda")
#some NA values are "NA","" or "#DIV/0!" which needs to be removed
train <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
na.strings  =c("NA","#DIV/0!", ""))
test <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
na.strings  =c("NA","#DIV/0!", ""))
library(tidyverse)
#calculate number of NA's in each column and filter where it's higher than 70%
ColLeft<- tibble(Name=names(train),sumNAs= colSums(is.na(train))) %>%
mutate(ratio=sumNAs/nrow(train))%>%
filter(ratio<0.7)
#generate list for selection of columns
list <- dput(as.character(ColLeft$Name))
#create filtered train dataset without columns where NA's more than 70%
train.flt <- train  %>%
select(list)
str(train.flt)
train.flt.clean <- train.flt %>%
select(-c('X','user_name','raw_timestamp_part_1','raw_timestamp_part_2','new_window','num_window',
'cvtd_timestamp'))
train.flt.clean$classe <- factor(train.flt.clean$classe)
#prepare data for training
set.seed(123)
index <- createDataPartition(train.flt.clean$classe, p=0.7,list=FALSE)
train.model <- train.flt.clean[index,]
valid.model <- train.flt.clean[-index,]
#train models
lda <- train(classe ~., data=train.model,method ="lda")
pred.qda <- predict(qda,valid.model)
pred.lda <- predict(lda,valid.model)
confusionMatrix(factor(valid.model$classe),pred.lda)$overall[1]
ac.lda <- confusionMatrix(factor(valid.model$classe),pred.lda)$overall[1]
ac.lda
qda <- train(classe ~., data=train.model,method ="qda")
pred.qda <- predict(qda,valid.model)
ac.qda <- confusionMatrix(factor(valid.model$classe),pred.qda)$overall[1]
cbind(ac.lda,ac.qda)
tibble(method = c("Linear DA","Quadrtic DA"), accuracy = c(ac.lda,ac.qda))
ac.qda <-
confusionMatrix(factor(valid.model$classe),pred.qda)$overall[1]
confusionMatrix(factor(valid.model$classe),pred.qda)$overall[1]
confusionMatrix(factor(valid.model$classe),pred.qda)
NZVal
NZVal <- nearZeroVar(train.flt, saveMetrics = TRUE)
NZVal
NZVal%>% filter(nzv == TRUE)
train.flt <- train  %>%
select(list)
save(qda)
save(qda, file='sda')
save(lda, file = 'lda')
save (rf, file = 'rf')
saveRDS(qda, file='sda')
saveRDS(lda, file = 'lda')
saveRDS (rf, file = 'rf')
saveRDS(qda, file='qda')
lda
typeof(lda)
rf
# rf <- train(classe ~., data=train.model.sub, method = "rf", prox = TRUE)
rf <- randomForest(classe ~. , data=train.model,importance=TRUE,
proximity=TRUE)
#random forest
library(randomForest)
# rf <- train(classe ~., data=train.model.sub, method = "rf", prox = TRUE)
rf <- randomForest(classe ~. , data=train.model,importance=TRUE,
proximity=TRUE)
saveRDS (rf, file = 'rf')
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(tidyverse)
library(caret)
library(randomForest)
#prediction on validation set
pred.lda <- predict(lda,valid.model)
ac.lda <- confusionMatrix(factor(valid.model$classe),pred.lda)$overall[1]
pred.qda <- predict(qda,valid.model)
ac.qda <- confusionMatrix(factor(valid.model$classe),pred.qda)$overall[1]
pred.rf <- predict(rf,valid.model)
ac.rf <- confusionMatrix(factor(valid.model$classe),pred.rf)$overall[1]
tibble(method = c("Linear DA","Quadratic DA","Random Forest"),
accuracy = c(ac.lda,ac.qda,ac.rf),
oos_err=c(1-ac.lda,1-ac.qda,1-ac.rf)
#prediction on validation set
pred.lda <- predict(lda,valid.model)
ac.lda <- confusionMatrix(factor(valid.model$classe),pred.lda)$overall[1]
pred.qda <- predict(qda,valid.model)
ac.qda <- confusionMatrix(factor(valid.model$classe),pred.qda)$overall[1]
pred.rf <- predict(rf,valid.model)
ac.rf <- confusionMatrix(factor(valid.model$classe),pred.rf)$overall[1]
tibble(method = c("Linear DA","Quadratic DA","Random Forest"),
accuracy = c(ac.lda,ac.qda,ac.rf),
oos_err=c((1-ac.lda),(1-ac.qda),(1-ac.rf))
acc <- c(ac.lda,ac.qda,ac.rf)
acc
oose <- apply(acc,1-acc)
sapply(acc,1-acc)
sapply(acc,function(x){1-x})
sapply(acc,function(x){round(1-x,3)})
oose <- sapply(acc,function(x){round(1-x,3)})
oose
#prediction on validation set
pred.lda <- predict(lda,valid.model)
ac.lda <- confusionMatrix(factor(valid.model$classe),pred.lda)$overall[1]
pred.qda <- predict(qda,valid.model)
ac.qda <- confusionMatrix(factor(valid.model$classe),pred.qda)$overall[1]
pred.rf <- predict(rf,valid.model)
ac.rf <- confusionMatrix(factor(valid.model$classe),pred.rf)$overall[1]
acc <- c(ac.lda,ac.qda,ac.rf)
oose <- sapply(acc,function(x){round(1-x,3)})
tibble(method = c("Linear DA","Quadratic DA","Random Forest"),
accuracy = acc,
oos_err=oose)
#prediction on validation set
pred.lda <- predict(lda,valid.model)
ac.lda <- confusionMatrix(factor(valid.model$classe),pred.lda)$overall[1]
pred.qda <- predict(qda,valid.model)
ac.qda <- confusionMatrix(factor(valid.model$classe),pred.qda)$overall[1]
pred.rf <- predict(rf,valid.model)
ac.rf <- confusionMatrix(factor(valid.model$classe),pred.rf)$overall[1]
acc <- round(c(ac.lda,ac.qda,ac.rf),3)
oose <- sapply(acc,function(x){round(1-x,3)})
tibble(method = c("Linear DA","Quadratic DA","Random Forest"),
accuracy = acc,
oos_err=oose)
#prediction on validation set
pred.lda <- predict(lda,valid.model)
ac.lda <- confusionMatrix(factor(valid.model$classe),pred.lda)$overall[1]
pred.qda <- predict(qda,valid.model)
ac.qda <- confusionMatrix(factor(valid.model$classe),pred.qda)$overall[1]
pred.rf <- predict(rf,valid.model)
ac.rf <- confusionMatrix(factor(valid.model$classe),pred.rf)$overall[1]
acc <- round(c(ac.lda,ac.qda,ac.rf),3)
oose <- sapply(acc,function(x){round(1-x,3)})
tibble(method = c("Linear DA","Quadratic DA","Random Forest"),
accuracy = acc,
'out of sampe error'=oose)
#prediction on validation set
pred.lda <- predict(lda,valid.model)
ac.lda <- confusionMatrix(factor(valid.model$classe),pred.lda)$overall[1]
pred.qda <- predict(qda,valid.model)
ac.qda <- confusionMatrix(factor(valid.model$classe),pred.qda)$overall[1]
pred.rf <- predict(rf,valid.model)
ac.rf <- confusionMatrix(factor(valid.model$classe),pred.rf)$overall[1]
acc <- round(c(ac.lda,ac.qda,ac.rf),3)
oose <- sapply(acc,function(x){round(1-x,3)})
tibble(Method = c("Linear DA","Quadratic DA","Random Forest"),
Accuracy = acc,
'Out of sampe error'=oose)
